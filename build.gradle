subprojects {
  buildscript {
    ext {
      springDependencyManagementVersion = "0.5.3.RELEASE"
      springBootGradlePluginVersion = "1.2.7.RELEASE"
      springCloudStarterParentVersion = "1.3.1.RELEASE"
      springCloudConfigVersion = "1.0.3.RELEASE"
      gradleDockerVersion = "1.2"
      gradleDockerRegistry = "registry.aixifan.com"
      propdepsPluginVersion = "0.0.7"
    }
    repositories {
      mavenLocal()
      maven { url "http://nexus.acfun.tv/nexus/content/groups/public/" }
      maven { url "http://repo.spring.io/plugins-release" }
      maven { url "http://repo.spring.io/release" }
      maven { url "http://repo.spring.io/milestone" }
      maven { url "http://repo.spring.io/snapshot" }
      mavenCentral()
    }

    dependencies {
      classpath("io.spring.gradle:dependency-management-plugin:${springDependencyManagementVersion}")
      classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootGradlePluginVersion}")
      classpath("se.transmode.gradle:gradle-docker:${gradleDockerVersion}")
      classpath("org.springframework.build.gradle:propdeps-plugin:${propdepsPluginVersion}")
    }
  }

  group "tv.acfun.cloud.server"
  version "1.0-SNAPSHOT"

  apply plugin: "java"
  apply plugin: "idea"
  apply plugin: "maven"

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    mavenLocal()
    maven { url "http://nexus.acfun.tv/nexus/content/groups/public/" }
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
    mavenCentral()
  }
  task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
  }

  task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
  }

  artifacts {
    archives javadocJar, sourcesJar
  }

  configurations.all {
    resolutionStrategy {
      cacheChangingModulesFor 0, "seconds"
      cacheDynamicVersionsFor 0, 'seconds'
    }
  }
}

def getIP() {
  InetAddress result = null;
  Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
  while (interfaces.hasMoreElements()) {
    Enumeration<InetAddress> addresses = interfaces.nextElement().getInetAddresses();
    while (addresses.hasMoreElements()) {
      InetAddress address = addresses.nextElement();
      if (!address.isLoopbackAddress()) {
        if (address.isSiteLocalAddress()) {
          return address.getHostAddress();
        } else if (result == null) {
          result = address;
        }
      }
    }
  }
  return (result != null ? result : InetAddress.getLocalHost()).getHostAddress();
}

task wrapper(type: Wrapper) {
  gradleVersion = "2.8"
}