apply plugin: "application"
apply plugin: "spring-boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "docker"
apply plugin: "propdeps"

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudStarterParentVersion}"
    mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootStarterParentVersion}"
  }
}

ext {
  commonVersion = "1.0-SNAPSHOT"
}

dependencies {
  provided("tv.acfun.cloud.common:common:${commonVersion}")

  compile("org.springframework.boot:spring-boot-starter-web") {
    exclude module: "spring-boot-starter-tomcat"
  }
  compile("org.springframework.boot:spring-boot-starter-undertow")
  compile("org.springframework.boot:spring-boot-starter-actuator")
  testCompile("org.springframework.boot:spring-boot-starter-test")

  compile("org.springframework.cloud:spring-cloud-starter-turbine-amqp")
  compile("org.springframework.cloud:spring-cloud-starter-config")
  compile("org.springframework.cloud:spring-cloud-starter-bus-amqp")
}

install.enabled = false
uploadArchives.enabled = false

task copyStartScript(type: Copy) {
  from {
    zipTree(configurations.provided.fileCollection { dep -> dep.group == "tv.acfun.cloud.common" && dep.name == "common" }.files.iterator().next())
  }
  into "$buildDir/tmp"
}

startScripts {
  dependsOn copyStartScript

  unixStartScriptGenerator.template = resources.text.fromFile("$buildDir/tmp/customUnixStartScript.txt")
  doLast {
    delete windowsScript
  }
}

task buildDocker(type: Docker, dependsOn: build) {
  tagVersion = project.version + ".1"
  maintainer = "Dreampie <Dreampie@outlook.com>"
  push = true
  applicationName = jar.baseName
  dockerfile = file("src/main/docker/Dockerfile")
  registry = gradleDockerRegistry
  doFirst {
    copy {
      from jar
      into stageDir
    }
  }
}